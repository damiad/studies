diff -rupNEZbB origin/usr/src/include/unistd.h modified/usr/src/include/unistd.h
--- origin/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/include/unistd.h	2023-06-05 00:05:18.000000000 +0200
@@ -69,6 +69,7 @@
 #include <sys/featuretest.h>
 #include <sys/types.h>
 #include <sys/unistd.h>
+#include <stdbool.h>
 
 #if _FORTIFY_SOURCE > 0
 #include <ssp/unistd.h>
@@ -136,6 +137,7 @@ int	 setgid(gid_t);
 int	 setpgid(pid_t, pid_t);
 pid_t	 setsid(void);
 int	 setuid(uid_t);
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill);
 unsigned int	 sleep(unsigned int);
 long	 sysconf(int);
 pid_t	 tcgetpgrp(int);
diff -rupNEZbB origin/usr/src/lib/libc/misc/Makefile.inc modified/usr/src/lib/libc/misc/Makefile.inc
--- origin/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/lib/libc/misc/Makefile.inc	2023-06-05 00:05:40.000000000 +0200
@@ -8,3 +8,5 @@ SRCS+=	initfini.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
+
+SRCS+= sched_deadline.c 
\ Brak znaku nowej linii na ko≈Ñcu pliku
diff -rupNEZbB origin/usr/src/lib/libc/misc/sched_deadline.c modified/usr/src/lib/libc/misc/sched_deadline.c
--- origin/usr/src/lib/libc/misc/sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ modified/usr/src/lib/libc/misc/sched_deadline.c	2023-06-05 00:06:05.000000000 +0200
@@ -0,0 +1,11 @@
+#include <lib.h>
+#include <unistd.h>
+
+// Changes sched of calling process.
+int sched_deadline(int64_t deadline, int64_t estimate, bool kill){
+    message m;
+    m.m_sched_deadline.deadline = deadline;
+    m.m_sched_deadline.estimate = estimate;
+    m.m_sched_deadline.kill = kill;
+    return _syscall(PM_PROC_NR, PM_SCHED_DEADLINE, &m);
+}
diff -rupNEZbB origin/usr/src/minix/include/minix/callnr.h modified/usr/src/minix/include/minix/callnr.h
--- origin/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/include/minix/callnr.h	2023-06-05 00:06:25.000000000 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SCHED_DEADLINE   (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB origin/usr/src/minix/include/minix/com.h modified/usr/src/minix/include/minix/com.h
--- origin/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/include/minix/com.h	2023-06-05 00:06:43.000000000 +0200
@@ -763,6 +763,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_DEADLINE	(SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB origin/usr/src/minix/include/minix/config.h modified/usr/src/minix/include/minix/config.h
--- origin/usr/src/minix/include/minix/config.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/include/minix/config.h	2023-06-05 00:07:08.000000000 +0200
@@ -31,6 +31,10 @@
 #define NR_SYS_PROCS      _NR_SYS_PROCS
 #define NR_SYS_CHUNKS	  BITMAP_CHUNKS(NR_SYS_PROCS)
 
+/* Constants for max before deadline */
+#define DEADLINE_Q 8
+#define PENALTY_Q 14
+
 /* Number of controller tasks (/dev/cN device classes). */
 #define NR_CTRLRS          2
 
diff -rupNEZbB origin/usr/src/minix/include/minix/ipc.h modified/usr/src/minix/include/minix/ipc.h
--- origin/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/include/minix/ipc.h	2023-06-05 00:07:34.000000000 +0200
@@ -6,6 +6,7 @@
 #include <minix/const.h>
 #include <sys/signal.h>
 #include <sys/types.h>
+#include <stdbool.h>
 
 /*==========================================================================* 
  * Types relating to messages. 						    *
@@ -988,8 +989,10 @@ typedef struct {
 	int quantum;
 	int priority;
 	int cpu;
+	int64_t deadline;
+	int64_t estimate;
 
-	uint8_t padding[40];
+	uint8_t padding[24];
 } mess_lsys_krn_schedule;
 _ASSERT_MSG_SIZE(mess_lsys_krn_schedule);
 
@@ -2023,6 +2026,17 @@ typedef struct {
 } mess_vmmcp_reply;
 _ASSERT_MSG_SIZE(mess_vmmcp_reply);
 
+// Message type for sched_deadline():
+typedef struct {
+	endpoint_t endpoint;
+	endpoint_t scheduler;
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+	uint8_t padding[31];
+} mess_sched_deadline;
+_ASSERT_MSG_SIZE(mess_sched_deadline);
+
 typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
@@ -2251,6 +2265,7 @@ typedef struct {
 		mess_vm_vfs_mmap	m_vm_vfs_mmap;
 		mess_vmmcp		m_vmmcp;
 		mess_vmmcp_reply	m_vmmcp_reply;
+		mess_sched_deadline	m_sched_deadline;
 
 		u8_t size[56];	/* message payload may have 56 bytes at most */
 	};
diff -rupNEZbB origin/usr/src/minix/include/minix/syslib.h modified/usr/src/minix/include/minix/syslib.h
--- origin/usr/src/minix/include/minix/syslib.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/include/minix/syslib.h	2023-06-05 01:20:46.000000000 +0200
@@ -13,6 +13,7 @@
 #include <minix/safecopies.h>
 #include <minix/sef.h>
 #include <machine/mcontext.h>
+#include <unistd.h>
 
 /* Forward declaration */
 struct reg86u;
@@ -38,7 +39,7 @@ int sys_exit(void);
 int sys_trace(int req, endpoint_t proc_ep, long addr, long *data_p);
 
 int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
-	cpu);
+	cpu, int64_t deadline, int64_t estimate);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
 
@@ -271,6 +272,7 @@ uid_t getnuid(endpoint_t proc_ep);
 gid_t getngid(endpoint_t proc_ep);
 int checkperms(endpoint_t endpt, char *path, size_t size);
 int copyfd(endpoint_t endpt, int fd, int what);
+int sched_max_deadline(endpoint_t endpoint, endpoint_t scheduler, int64_t deadline, int64_t estimate, bool kill);
 #define COPYFD_FROM	0	/* copy file descriptor from remote process */
 #define COPYFD_TO	1	/* copy file descriptor to remote process */
 #define COPYFD_CLOSE	2	/* close file descriptor in remote process */
diff -rupNEZbB origin/usr/src/minix/kernel/proc.c modified/usr/src/minix/kernel/proc.c
--- origin/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/kernel/proc.c	2023-06-05 00:08:52.000000000 +0200
@@ -1520,6 +1520,76 @@ asyn_error:
   return(OK);
 }
 
+int64_t time_now() {
+  clock_t realtime = get_realtime();
+  int64_t sec = (boottime + realtime / system_hz);
+  int64_t remaining_ticks = realtime % system_hz;
+  int64_t nano_sec = (remaining_ticks * 1000000000LL) / system_hz;
+  int64_t time_ms = (sec * 1000LL) + (nano_sec / 1000000LL);
+  return time_ms;
+}
+
+void update_deadline_q(struct proc **head) {
+  struct proc *current_proc = head[DEADLINE_Q];
+
+  if (current_proc != NULL) {
+        current_proc->estimate_end = time_now() + current_proc->estimate;
+  }
+
+  int64_t prev_estimate_end = current_proc->estimate_end;
+  while (current_proc->p_nextready != NULL) {
+        current_proc = current_proc->p_nextready;
+        current_proc->estimate_end = prev_estimate_end + current_proc->estimate;
+        prev_estimate_end = current_proc->estimate_end;
+  }
+}
+
+void place_in_deadline_q(struct proc **head, struct proc **tail,
+                         struct proc *proc) {
+  update_deadline_q(head);
+  struct proc *current_proc = head[DEADLINE_Q];
+  struct proc *prev_proc = NULL;
+  int k = 0;
+
+  while (current_proc != NULL) {
+        if (current_proc->estimate_end <= current_proc->deadline) {
+                k++;
+        }
+        if (current_proc->estimate_end + proc->estimate <= proc->deadline) {
+                prev_proc = current_proc;
+        } else {
+                if (current_proc->estimate_end <= current_proc->deadline &&
+                    current_proc->estimate_end + proc->estimate >
+                        current_proc->deadline) {
+            prev_proc = current_proc;
+                }
+        }
+        current_proc = current_proc->p_nextready;
+  }
+  if(k == 0){
+	proc->p_nextready = head[DEADLINE_Q];
+	head[DEADLINE_Q] = proc;
+	return;
+  }
+  if(prev_proc != NULL &&
+	 prev_proc->estimate_end + proc->estimate > proc->deadline){
+		while(prev_proc != NULL && prev_proc->estimate <= proc->estimate){
+			prev_proc = prev_proc->p_nextready;
+		}
+  }
+  if(prev_proc == NULL){
+	proc->p_nextready = NULL;
+	tail[DEADLINE_Q]->p_nextready = proc;
+	tail[DEADLINE_Q] = proc;
+	return;
+  }
+  proc->p_nextready = prev_proc->p_nextready;
+  prev_proc->p_nextready = proc;
+  if(prev_proc == tail[DEADLINE_Q]){
+	tail[DEADLINE_Q] = proc;
+  }
+}
+
 /*===========================================================================*
  *				enqueue					     * 
  *===========================================================================*/
@@ -1551,10 +1621,14 @@ void enqueue(
       rp->p_nextready = NULL;		/* mark new end */
   } 
   else {					/* add to tail of queue */
+	if(q == DEADLINE_Q) {
+		place_in_deadline_q(rdy_head, rdy_tail, rp);
+	} else {
       rdy_tail[q]->p_nextready = rp;		/* chain tail of queue */	
       rdy_tail[q] = rp;				/* set new queue tail */
       rp->p_nextready = NULL;		/* mark new end */
   }
+  }
 
   if (cpuid == rp->p_cpu) {
 	  /*
diff -rupNEZbB origin/usr/src/minix/kernel/proc.h modified/usr/src/minix/kernel/proc.h
--- origin/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/kernel/proc.h	2023-06-05 00:08:57.000000000 +0200
@@ -3,6 +3,7 @@
 
 #include <minix/const.h>
 #include <sys/cdefs.h>
+#include <stdbool.h>
 
 #ifndef __ASSEMBLY__
 
@@ -131,6 +132,9 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+  int64_t deadline;
+  int64_t estimate;
+  int64_t estimate_end;
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupNEZbB origin/usr/src/minix/kernel/system/do_schedule.c modified/usr/src/minix/kernel/system/do_schedule.c
--- origin/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/kernel/system/do_schedule.c	2023-06-05 00:09:01.000000000 +0200
@@ -24,6 +24,8 @@ int do_schedule(struct proc * caller, me
 	priority = m_ptr->m_lsys_krn_schedule.priority;
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
+	p->deadline = m_ptr->m_lsys_krn_schedule.deadline;
+	p->estimate = m_ptr->m_lsys_krn_schedule.estimate;
 
 	return sched_proc(p, priority, quantum, cpu);
 }
diff -rupNEZbB origin/usr/src/minix/lib/libsys/sched_start.c modified/usr/src/minix/lib/libsys/sched_start.c
--- origin/usr/src/minix/lib/libsys/sched_start.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/lib/libsys/sched_start.c	2023-06-05 01:21:11.000000000 +0200
@@ -9,6 +9,17 @@
 #include "kernel/type.h"
 #include "kernel/proc.h"
 
+int sched_max_deadline(endpoint_t endpoint, endpoint_t scheduler, int64_t deadline, int64_t estimate, bool kill){
+	message m;
+	m.m_sched_deadline.endpoint = endpoint;
+	m.m_sched_deadline.scheduler = scheduler;
+	m.m_sched_deadline.deadline = deadline;
+	m.m_sched_deadline.estimate = estimate;
+	m.m_sched_deadline.kill = kill;
+
+	return _taskcall(scheduler, SCHEDULING_DEADLINE, &m);
+}
+
 /*===========================================================================*
  *				sched_inherit				     *
  *===========================================================================*/
diff -rupNEZbB origin/usr/src/minix/lib/libsys/sys_schedule.c modified/usr/src/minix/lib/libsys/sys_schedule.c
--- origin/usr/src/minix/lib/libsys/sys_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/lib/libsys/sys_schedule.c	2023-06-05 00:09:08.000000000 +0200
@@ -3,7 +3,9 @@
 int sys_schedule(endpoint_t proc_ep,
 			int priority,
 			int quantum,
-			int cpu)
+			int cpu,
+			int64_t deadline,
+			int64_t estimate)
 {
 	message m;
 
@@ -11,5 +13,7 @@ int sys_schedule(endpoint_t proc_ep,
 	m.m_lsys_krn_schedule.priority = priority;
 	m.m_lsys_krn_schedule.quantum  = quantum;
 	m.m_lsys_krn_schedule.cpu = cpu;
+	m.m_lsys_krn_schedule.deadline = deadline;
+	m.m_lsys_krn_schedule.estimate = estimate;
 	return(_kernel_call(SYS_SCHEDULE, &m));
 }
diff -rupNEZbB origin/usr/src/minix/servers/pm/do_sched_deadline.c modified/usr/src/minix/servers/pm/do_sched_deadline.c
--- origin/usr/src/minix/servers/pm/do_sched_deadline.c	1970-01-01 01:00:00.000000000 +0100
+++ modified/usr/src/minix/servers/pm/do_sched_deadline.c	2023-06-05 00:09:14.000000000 +0200
@@ -0,0 +1,19 @@
+#include <stdbool.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <minix/config.h>
+#include "pm.h"
+#include "mproc.h"
+#include "proto.h"
+
+int do_sched_deadline(void) {
+    int64_t deadline = m_in.m_sched_deadline.deadline;
+    int64_t estimate = m_in.m_sched_deadline.estimate;
+    bool kill = m_in.m_sched_deadline.kill;
+    endpoint_t endpoint = mp->mp_endpoint;
+    endpoint_t scheduler = mp->mp_scheduler;
+    m_in.m_sched_deadline.endpoint = endpoint;
+    m_in.m_sched_deadline.scheduler = scheduler;
+
+    return sched_max_deadline(endpoint, scheduler, deadline, estimate, kill);
+}
diff -rupNEZbB origin/usr/src/minix/servers/pm/Makefile modified/usr/src/minix/servers/pm/Makefile
--- origin/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/pm/Makefile	2023-06-05 00:09:39.000000000 +0200
@@ -5,6 +5,7 @@ PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
 	profile.c mcontext.c schedule.c
+SRCS += do_sched_deadline.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB origin/usr/src/minix/servers/pm/proto.h modified/usr/src/minix/servers/pm/proto.h
--- origin/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/pm/proto.h	2023-06-05 00:09:41.000000000 +0200
@@ -82,6 +82,9 @@ int do_settime(void);
 int do_trace(void);
 void trace_stop(struct mproc *rmp, int signo);
 
+/* sched_deadline.c */
+int do_sched_deadline(void);
+
 /* utility.c */
 pid_t get_free_pid(void);
 char *find_param(const char *key);
diff -rupNEZbB origin/usr/src/minix/servers/pm/table.c modified/usr/src/minix/servers/pm/table.c
--- origin/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/pm/table.c	2023-06-05 00:09:43.000000000 +0200
@@ -11,7 +11,7 @@
 
 #define CALL(n)	[((n) - PM_BASE)]
 
-int (* const call_vec[NR_PM_CALLS])(void) = {
+int (*const call_vec[NR_PM_CALLS])(void) = {
 	CALL(PM_EXIT)		= do_exit,		/* _exit(2) */
 	CALL(PM_FORK)		= do_fork,		/* fork(2) */
 	CALL(PM_WAITPID)	= do_waitpid,		/* waitpid(2) */
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+    CALL(PM_GETSYSINFO) = do_getsysinfo,          /* getsysinfo(2) */
+    CALL(PM_SCHED_DEADLINE) = do_sched_deadline   /* sched_deadline(2) */
 };
diff -rupNEZbB origin/usr/src/minix/servers/sched/main.c modified/usr/src/minix/servers/sched/main.c
--- origin/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/sched/main.c	2023-06-05 00:09:46.000000000 +0200
@@ -87,6 +87,9 @@ int main(void)
 				result = EPERM;
 			}
 			break;
+		case SCHEDULING_DEADLINE:
+			result = do_sched_max_deadline(&m_in);
+			break;
 		default:
 			result = no_sys(who_e, call_nr);
 		}
diff -rupNEZbB origin/usr/src/minix/servers/sched/proto.h modified/usr/src/minix/servers/sched/proto.h
--- origin/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/sched/proto.h	2023-06-05 00:09:50.000000000 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_sched_max_deadline(message *m_ptr);
 void init_scheduling(void);
 
 /* utility.c */
diff -rupNEZbB origin/usr/src/minix/servers/sched/schedproc.h modified/usr/src/minix/servers/sched/schedproc.h
--- origin/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/sched/schedproc.h	2023-06-05 00:09:52.000000000 +0200
@@ -33,6 +33,11 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+	int64_t deadline;
+	int64_t estimate;
+	bool kill;
+	unsigned prev_priority;
+	int64_t time_used;
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB origin/usr/src/minix/servers/sched/schedule.c modified/usr/src/minix/servers/sched/schedule.c
--- origin/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ modified/usr/src/minix/servers/sched/schedule.c	2023-06-05 03:10:33.000000000 +0200
@@ -99,9 +99,32 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
+	if (rmp->priority < MIN_USER_Q && rmp->priority != DEADLINE_Q) {
 		rmp->priority += 1; /* lower priority */
+		if (rmp->priority == DEADLINE_Q) {
+			rmp->priority++;
 	}
+	}
+	rmp->time_used += rmp->time_slice;
+	if (rmp->priority == DEADLINE_Q && rmp->time_used >= rmp->estimate) {
+		if (rmp->kill) {
+			sys_kill(rmp->endpoint, SIGKILL);
+			return OK;
+		} else {
+			rmp->deadline = -1;
+			rmp->priority = PENALTY_Q;
+		}
+	}
+
+	clock_t ticks, realtime;
+	time_t boottime;
+	int res = getuptime(&ticks, &realtime, &boottime);
+	int64_t seconds = boottime + (realtime / sys_hz());
+	int64_t nanoseconds = (uint32_t) ((realtime % sys_hz()) * 1000000000ULL / sys_hz());
+	int64_t milliseconds = nanoseconds / 1000;
+
+	if (rmp->priority == DEADLINE_Q && seconds * 1000 + milliseconds > rmp->deadline)
+		rmp->priority = rmp->prev_priority;
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -208,6 +231,11 @@ int do_start_scheduling(message *m_ptr)
 			return rv;
 
 		rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->deadline = schedproc[parent_nr_n].deadline;
+		rmp->estimate = schedproc[parent_nr_n].estimate;
+		rmp->kill = schedproc[parent_nr_n].kill;
+		rmp->prev_priority = schedproc[parent_nr_n].prev_priority;
+		rmp->time_used = schedproc[parent_nr_n].time_used;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
 		
@@ -273,6 +301,9 @@ int do_nice(message *m_ptr)
 
 	rmp = &schedproc[proc_nr_n];
 	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
+	if (new_q == DEADLINE_Q) {
+		new_q--;
+	}
 	if (new_q >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -320,7 +351,7 @@ static int schedule_process(struct sched
 		new_cpu = -1;
 
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu)) != OK) {
+		new_quantum, new_cpu, rmp->deadline, rmp->estimate)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
 		rmp->endpoint, err);
 	}
@@ -356,8 +387,11 @@ static void balance_queues(minix_timer_t
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
 		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
+			if (rmp->priority > rmp->max_priority &&
+					rmp->priority != DEADLINE_Q) {
 				rmp->priority -= 1; /* increase priority */
+				if(rmp->priority == DEADLINE_Q)
+					rmp->priority -= 1; /* skips DEADLINE_Q priority */
 				schedule_process_local(rmp);
 			}
 		}
@@ -365,3 +399,71 @@ static void balance_queues(minix_timer_t
 
 	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
 }
+
+/*===========================================================================*
+ *				do_sched_max_deadline
+ *===========================================================================*/
+
+int do_sched_max_deadline(message *m_ptr) {
+	int64_t deadline = m_ptr->m_sched_deadline.deadline;
+	int64_t estimate = m_ptr->m_sched_deadline.estimate;
+	endpoint_t endpoint =  m_ptr->m_sched_deadline.endpoint;
+	bool kill = m_ptr->m_sched_deadline.kill;
+
+    clock_t ticks, realtime;
+	time_t boottime;
+	int res = getuptime(&ticks, &realtime, &boottime);
+	int64_t seconds = boottime + (realtime / sys_hz());
+	int64_t nanoseconds = (uint32_t) ((realtime % sys_hz()) * 1000000000ULL / sys_hz());
+	int64_t milliseconds = nanoseconds / 1000000;
+
+	if ((deadline < seconds * 1000 + milliseconds + estimate && deadline != -1) ||
+	        estimate <= 0)
+		return EINVAL;
+
+	struct schedproc *rmp;
+	int rv;
+	int proc_nr_n;
+	unsigned new_q, old_q;
+
+	/* check who can send you requests */
+	if (!accept_message(m_ptr)) {
+		return EPERM;
+	}
+
+	if (sched_isokendpt(endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg ""%d\n", endpoint);
+		return EBADEPT;
+	}
+    
+	rmp = &schedproc[proc_nr_n];
+	new_q = DEADLINE_Q;
+	if (new_q >= NR_SCHED_QUEUES) {
+		return EINVAL;
+	}
+	/* Store old values, in case we need to roll back the changes */
+	old_q     = rmp->priority;
+	if ((old_q == DEADLINE_Q && deadline != -1) || (old_q != DEADLINE_Q && deadline == -1)) {
+		return EPERM;
+	}
+
+	/* Update the proc entry and reschedule the process */
+	if (deadline == -1) {
+		rmp->priority = rmp->prev_priority;
+	} else {
+		rmp->deadline = deadline;
+		rmp->estimate = estimate;
+		rmp->kill = kill;
+		rmp->time_used  = 0;
+		rmp->prev_priority = rmp->priority;
+		rmp->priority = DEADLINE_Q;
+	}
+
+	if ((rv = schedule_process_local(rmp)) != OK) {
+		/* Something went wrong when rescheduling the process, roll
+		 * back the changes to proc struct */
+		rmp->priority     = old_q;
+	}
+	
+	return rv;
+}
